grammar Accept
  rule body
    lws? accept_element (lws? ',' accept_element)* lws?
    {
      def to_value
        array_wrap(super)
      end
    }
  end

  rule accept_element
    lws? media_range (accept_params)?
    {
      def to_value
        array_wrap(super).reduce({}) { |m,v| m.merge v }
      end
    }
  end

  rule media_range 
    lws? media_type parameters:( lws? ";" (lws? !'q' parameter) )*
    {
      def to_value
        {
          media_type: media_type.to_value,
          media_type_params: array_wrap(parameters.to_value).reduce({}) { |m,v| m.merge v }
        }
      end
    }
  end
  
  rule media_type
  lws? token lws? "/" token
  {
    def to_value
      super.join('/')
    end
  }
  end

  rule accept_params
    lws? ";" lws? "q" lws? "=" qvalue accept_extensions:(accept_extension)*
    {
      def to_value
        {
          qvalue: qvalue.to_value,
          accept_params: array_wrap(accept_extensions.to_value).reduce({}) { |m,v| m.merge v }
        }
      end
    }
  end

  rule qvalue
    lws? (('0' ('.' [0-9] ..3)?) / ('1' ('.' '0' ..3)?))
    {
      def to_value
        text_value.strip.to_f
      end
    }
  end

  rule accept_extension
    lws? ";" token assignment:(lws? "=" (token / quoted_string))?
    {
      def to_value
        {token.to_value => assignment.to_value}
      end
    }
  end

  rule parameter
    attribute lws? "=" value
    {
      def to_value
        {attribute.to_value => value.to_value}
      end
    }
  end

  rule attribute
    token
  end

  rule value
    token / quoted_string
  end

  rule quoted_string
    lws? '"' (quoted_pair / qdtext )* '"'
    {
      def to_value
        elements.select { |e| e.respond_to? :to_value }.map(&:to_value).join('')
      end
    }
  end

  rule quoted_pair
    '\\' .
    {
      def to_value
        text_value[-1]
      end
    }
  end

  rule qdtext
    !'"' .
    {
      def to_value
        text_value
      end
    }
  end

  rule token
    lws? (!(separators / ctl) .)+
    {
      def to_value
        text_value.strip
      end
    }
  end

  rule ctl
    [\x00-\x19\x7F]
    {}
  end

  rule separators
    [()<>@,;:\\"/\[\]?={} \t]
    {}
  end

  rule lws
    ('\r\n')? [ \t]+
  end
end
